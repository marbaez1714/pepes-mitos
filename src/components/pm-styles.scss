$fontSize1: 5px;
$fontSize2: 7px;
$fontSize3: 9px;
$fontSize4: 12px;
$fontSize5: 16px;
$fontSize6: 21px;
$fontSize7: 28px;
$fontSize8: 37px;

$light: #fbfbea;
$dark: #1f1a1e;
$blue-light: #5bc6cc;
$blue-dark: #072269;
$orange: #f58021;
$brown: #382626;

.footerContainer {
  width: 100%;
  height: 60px;
  color: $light;
  align-content: center;
  background-color: $dark;
  padding: 0 20px;
  z-index: 5;

}
// credit to https://alligator.io/css/pure-css-parallax/ for the wonderful parallax effect
.parallaxWrapper {
  /* The height needs to be set to a fixed value for the effect to work.
   * 100vh is the full height of the viewport. */
  height: 100vh;
  /* The scaling of the images would add a horizontal scrollbar, so disable x overflow. */
  overflow-x: hidden;
  /* Enable scrolling on the page. */
  overflow-y: auto;
  /* Set the perspective to 2px. This is essentailly the simulated distance from the viewport to transformed objects.*/
  perspective: 2px;
}
.parallaxSection {
  /* Needed for children to be absolutely positioned relative to the parent. */
  position: relative;
  /* The height of the container. Must be set, but it doesn't really matter what the value is. */
  height: 75vh;
  /* For text formatting. */
  display: flex;
  align-items: center;
  justify-content: center;
  color: $light;
  &.parallax {
    height: 40vh;
  }
  &.mapContainer {
    height: 60vh;
    padding: 20px;
    background: $dark;
    flex-direction: column;
    align-items: baseline;

    .blueCorner {
      height: 40px;
      width: 40px;
      position: absolute;
      opacity: 0.5;

      &.left {
        left: -10px;
      }

      &.right {
        right: -10px;
      }

      &.top {
        top: -10px;

        &.left {
          transform: rotateZ(180deg);
        }

        &.right {
          transform: rotateZ(270deg);
        }
      }

      &.bottom {
        bottom: -10px;

        &.left {
          transform: rotateZ(90deg);
        }
      }
    }
    .text {
      align-self: baseline;
      &.title {
        font-size: $fontSize6;
        font-family: "Fugaz One", cursive;
      }
      &.address {
        font-size: $fontSize4;
        margin-top: 8px;
        margin-bottom: 20px;
      }
    }
    .mapWrapper {
      pointer-events: none;
      display: flex;
      width: 100%;
      height: 100%;
    }
    .information {
      list-style-type: none;
      padding-left: 0;
      font-family: "Belgrano", serif;
      display: flex;
      flex-direction: column;
      width: 100%;
      text-align: center;
      margin-bottom: 0;
      margin-top: 0;
      &.address {
        margin: 0 0 10px 0;
        .phone {
          color: $light;
          text-decoration: none;
        }
      }
      &.time {
        margin: 10px 0 0 0;
        .hoursTitle {
          margin: 5px;
        }
        .hours {
          display: flex;
          justify-content: center;
          margin-top: 3px;
          .days {
            font-size: $fontSize4;
            display: flex;
            margin-bottom: 3px;
          }
        }
      }
    }
  }
}
.parallax::after {
  /* Display and position the pseudo-element */
  content: " ";
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;

  /* Move the pseudo-element back away from the camera,
   * then scale it back up to fill the viewport.
   * Because the pseudo-element is further away, it appears to move more slowly, like in real life. */
  transform: translateZ(-1px) scale(2.25);
  /* Force the background image to fill the whole element. */
  background-size: 100%;
  /* Keep the image from overlapping sibling elements. */
  z-index: -1;
  background-repeat: no-repeat;
  background-size: cover;
}
.static {
  padding: 20px;
  background: $blue-dark;
}
.bg1::after {
  background-image: url("../images/background1-3.jpg");
}
.bg2::after {
  background-image: url("../images/background2-3.jpg");
}
.bg3::after {
  background-image: url("../images/background3-3.jpg");
}


